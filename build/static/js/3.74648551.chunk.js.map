{"version":3,"sources":["components/UI/Input/Input.js","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","input","props","inputElement","inputClasses","invalid","shouldValidate","touched","push","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","label","checkoutSummary","react_default","style","width","margin","Burger","ingredients","Button","btnType","clicked","CheckoutCancelled","CheckoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","isEmail","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","setState","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","Input","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","CheckoutCancelledHandler","history","goBack","CheckoutContinuedHandler","replace","summary","react_router","to","purchasedRedirect","purchased","CheckoutSummary_CheckoutSummary","path","match","render","Checkout_ContactData_ContactData"],"mappings":"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","file":"static/js/3.74648551.chunk.js","sourcesContent":["import React from 'react';\nimport './Input.css'\nconst input =(props)=>{\n\n    let inputElement = null;\n     const inputClasses = [\"InputElement\"];\n     if (props.invalid && props.shouldValidate && props.touched){\ninputClasses.push(\"Invalid\");\n     }\n\n    switch(props.elementType){\ncase ('input'):\ninputElement=<input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value}\nonChange  ={props.changed}\n/>\nbreak;\ncase ('textarea'):\ninputElement=<textarea className={inputClasses} {...props.elementConfig} value={props.value}\nonChange ={props.changed}\n/>\nbreak;\ncase ('select'):\ninputElement=<select \nclassName={inputClasses}\n value={props.value}\n onChange ={props.changed}\n >\n \n     {props.elementConfig.options.map(option=>(\n         <option key={option.value} value={option.value}>\n             {option.displayValue}\n         </option>\n     ))}\n    </select>\nbreak;\n\ndefault:\n        inputElement=<input className={inputClasses} {...props.elementConfig} value={props.value}/>\n\n    }\n\n    return(\n    <div className=\"Input\">\n        <label className=\"Label\">{props.label}</label>\n        {inputElement}\n    </div>\n    );\n};\n\nexport default input;","import React from 'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport './CheckoutSummary.css'\nconst checkoutSummary =(props)=>{\nreturn(\n    <div className=\"CheckoutSummary\">\n        <h1>We hope it tastes well!</h1>\n        <div style={{width:'100%',margin:'auto'}}>\n        <Burger ingredients={props.ingredients}/>\n        </div>\n        <Button \n         btnType=\"Danger\"\n         clicked={props.CheckoutCancelled}\n         >CANCEL</Button>\n        <Button  btnType=\"Success\"\n        clicked={props.CheckoutContinued}\n        >CONTINUE</Button>\n    </div>\n);\n}\nexport default checkoutSummary;","import React,{Component} from 'react';\nimport {connect} from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport './ContactData.css'\nimport axios from '../../../axios-orders'\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport {updateObject,checkValidity} from '../../../shared/utility'\nclass ContactData extends Component{\n    state={\norderForm:{\n    \n        name:{\n            elementType:'input',\n            elementConfig:{\n                type:'text',\n                placeholder:'Your Name'\n            },\n            value:'',\n            validation:{\n                required:true\n            },\n            valid:false,\n            touched:false\n        },\n            street:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Street'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false\n            },\n            zipCode:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'ZIP Code'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength:5,\n                    maxLength:5\n                },\n                valid:false,\n                touched:false\n            },\n            country:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Country'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false\n                \n            },\n      \n        email:{\n            elementType:'input',\n            elementConfig:{\n                type:'emil',\n                placeholder:'Your E-Mail'\n            },\n            value:'',\n            validation:{\n                required:true,\n                isEmail:true\n            },\n            valid:false,\n            touched:false\n        },\n    deliveryMethod:{\n        elementType:'select',\n        elementConfig:{\n           options:[\n        {value:'fastest', displayValue:'Fastest'},\n           {value:'cheapest', displayValue:'Cheapest'}\n           \n        ]\n        },\n        value:'fastest',\n        validation:{},\n        valid:true\n\n    }\n},\nformIsValid:false\n    }\n\norderHandler =(event)=>{\nevent.preventDefault();\n  const formData= {};\n  for(let formElementIdentifier in this.state.orderForm){\n      formData[formElementIdentifier]=this.state.orderForm[formElementIdentifier].value;\n  }\n  const order ={\n      ingredients:this.props.ings,\n      price:this.props.price,\n      orderData:formData,\n      userId:this.props.userId\n\n  }\n\n  this.props.onOrderBurger(order,this.props.token);\n\n    }\n\n\n inputChangedHandler=(event, inputIdentifier)=>{\n\nconst updatedFormElement = updateObject(this.state.orderForm[inputIdentifier],{\n    value:event.target.value,\n    valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n    touched:true\n})\nconst updatedOrderForm = updateObject(this.state.orderForm, {\n    [inputIdentifier]: updatedFormElement\n})\n\n\nlet formIsValid = true;\nfor(let inputIdentifier in updatedOrderForm){\n    formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n}\n\nthis.setState({orderForm:updatedOrderForm,formIsValid:formIsValid})\n }   \n    render(){\n\n        const formElementsArray=[];\n        for (let key in this.state.orderForm){\n            formElementsArray.push({\n                id:key,\n                config:this.state.orderForm[key]\n            })\n        }\n\n        let form =(\n            <form onSubmit={this.orderHandler}>\n          \n{formElementsArray.map(formElement =>(\n    <Input\n    key={formElement.id}\n     elementType={formElement.config.elementType} \n     elementConfig={formElement.config.elementConfig} \n     value={formElement.config.value}\n     invalid={!formElement.config.valid}\n     shouldValidate={formElement.config.validation}\n     touched={formElement.config.touched}\n     changed={(event)=>this.inputChangedHandler(event,formElement.id)}\n     />\n\n))}\n            <Button btnType=\"Success\" disabled={!this.state.formIsValid} >ORDER</Button>\n        </form>\n        );\n        if (this.props.loading){\n            form=<Spinner />\n        }\n        return(\n            <div className=\"ContactData\">\n                <h4>Enter your Contact Data</h4>\n{form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state =>{\n    return{\n        ings:state.burgerBuilder.ingredients,\n        price:state.burgerBuilder.totalPrice,\n        loading:state.order.loading,\n        token:state.auth.token,\n        userId:state.auth.userId\n    }\n} \n\nconst mapDispatchToprops = dispatch =>{\n    return{\n    onOrderBurger: (orderData,token)=>dispatch(actions.purchaseBurger(orderData,token))\n    }\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToprops)(withErrorHandler (ContactData, axios));","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary'\nimport ContactData from './ContactData/ContactData';\nimport { connect } from 'react-redux';\nclass Checkout extends Component {\n\n\n\n    CheckoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n    CheckoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    }\n\n    render() {\n        let summary = <Redirect to=\"/\" />\n        \n        if (this.props.ings) {\n            const purchasedRedirect = this.props.purchased? <Redirect to=\"/\" /> : null\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                <CheckoutSummary ingredients={this.props.ings}\n                    CheckoutCancelled={this.CheckoutCancelledHandler}\n                    CheckoutContinued={this.CheckoutContinuedHandler}\n                />\n                <Route\n                path={this.props.match.path + '/contact-data'}\n                render={(props) => (<ContactData ingredients={this.props.ings} price={this.props.price} {...props} />)} />\n                </div>\n            )\n        }\n        return summary;\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n       /*  price: state.totalPrice */\n    }\n}\n\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}