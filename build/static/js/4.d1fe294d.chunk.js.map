{"version":3,"sources":["components/UI/Input/Input.js","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","input","props","inputElement","inputClasses","invalid","shouldValidate","touched","push","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","label","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","_Users_bridgelabs_Downloads_burger_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModelHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_7__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_12__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_13__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_8__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.d1fe294d.chunk.js","sourcesContent":["import React from 'react';\nimport './Input.css'\nconst input =(props)=>{\n\n    let inputElement = null;\n     const inputClasses = [\"InputElement\"];\n     if (props.invalid && props.shouldValidate && props.touched){\ninputClasses.push(\"Invalid\");\n     }\n\n    switch(props.elementType){\ncase ('input'):\ninputElement=<input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value}\nonChange  ={props.changed}\n/>\nbreak;\ncase ('textarea'):\ninputElement=<textarea className={inputClasses} {...props.elementConfig} value={props.value}\nonChange ={props.changed}\n/>\nbreak;\ncase ('select'):\ninputElement=<select \nclassName={inputClasses}\n value={props.value}\n onChange ={props.changed}\n >\n \n     {props.elementConfig.options.map(option=>(\n         <option key={option.value} value={option.value}>\n             {option.displayValue}\n         </option>\n     ))}\n    </select>\nbreak;\n\ndefault:\n        inputElement=<input className={inputClasses} {...props.elementConfig} value={props.value}/>\n\n    }\n\n    return(\n    <div className=\"Input\">\n        <label className=\"Label\">{props.label}</label>\n        {inputElement}\n    </div>\n    );\n};\n\nexport default input;","import React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport  './Auth.css'\nimport * as actions from '../../store/actions/auth'\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport {Redirect} from 'react-router-dom';\nimport {updateObject, checkValidity} from '../../shared/utility'\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    }\n\n\n    componentDidMount(){\nif(!this.props.buildingBurger && this.props.authRedirectPath !=='/'){\nthis.props.onSetAuthRedirectPath();\n}\n    }\n\n\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls,{\n            [controlName]: updateObject(this.state.controls[controlName],{\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            })\n        })\n\n        this.setState({ controls: updatedControls })\n    }\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\n    }\n\n    switchAuthModelHandler = () => {\n        this.setState(prevState => {\n            return { isSignup: !prevState.isSignup }\n        })\n    }\n\n    render() {\n\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n            />\n\n        ));\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n\n        if (this.props.error) {\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            );\n        }\nlet authRedirect = null;\n        if(this.props.isAuthenticated){\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n        return (\n            <div className=\"Auth\">\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType='Success'  >SUBMIT</Button>\n                </form>\n                <Button\n                    clicked={this.switchAuthModelHandler}\n                    btnType='Danger'>SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !==null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath:()=> dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}